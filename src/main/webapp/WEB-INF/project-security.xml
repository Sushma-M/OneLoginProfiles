<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<beans xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd" xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <bean class="com.wavemaker.runtime.security.SecurityService" id="securityService"/>
    <bean class="com.wavemaker.runtime.security.controller.SecurityController" id="securityController"/>
    <bean class="com.wavemaker.runtime.web.filter.SSLSecureFilter" id="sslSecureFilter"/>
    <bean class="com.wavemaker.runtime.security.xss.filter.WMXSSFilter" id="wmXSSFilter"/>
    <bean class="com.wavemaker.runtime.security.filter.WMXFrameOptionsHeaderFilter" id="wmXFrameOptionsFilter"/>
    <bean class="com.wavemaker.runtime.security.filter.WMXContentTypeOptionsFilter" id="wmXContentTypeOptionsFilter"/>
    <bean class="org.springframework.security.web.FilterChainProxy" id="wmCompositeSecurityFilter">
        <constructor-arg>
            <security:filter-chain pattern="/**" filters="sslSecureFilter, wmXSSFilter, wmXFrameOptionsFilter, wmXContentTypeOptionsFilter"/>
        </constructor-arg>
    </bean>
    <bean class="com.wavemaker.runtime.data.spring.WMPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>
                    classpath:securityService.properties
                </value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.config.WMAppSecurityConfig" id="WMAppSecurityConfig">
        <property name="sslConfig" ref="sslConfig"/>
        <property name="xssConfig" ref="xssConfig"/>
        <property name="enforceSecurity">
            <value>${enabled}</value>
        </property>
        <property name="loginConfig" ref="loginConfig"/>
        <property name="rememberMeConfig" ref="rememberMeConfig"/>
        <property name="tokenAuthConfig" ref="tokenAuthConfig"/>
        <property name="csrfConfig" ref="csrfConfig"/>
        <property name="rolesConfig" ref="rolesConfig"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.SSLConfig" id="sslConfig">
        <property name="useSSL" value="${general.ssl.enabled}"/>
        <property name="sslPort" value="${general.ssl.port}"/>
        <property name="excludedUrls" value="#{null}"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.XSSConfig" id="xssConfig">
        <property name="enforceXssSecurity" value="${general.xss.enabled}"/>
        <property name="policyFile" value="wm-xss-policies.xml"/>
        <property name="xssFilterStrategy" value="WHITE_LIST"/>
    </bean>
    <security:global-method-security pre-post-annotations="enabled" authentication-manager-ref="authenticationManager"/>
    <security:http pattern="/app.css" security="none"/>
    <security:http pattern="/app.js" security="none"/>
    <security:http pattern="/app.variables.json" security="none"/>
    <security:http pattern="/index.html" security="none"/>
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/favicon.ico" security="none"/>
    <security:http pattern="/print.css" security="none"/>
    <security:http pattern="/wmProperties.js" security="none"/>
    <security:http pattern="/cordova.js" security="none"/>
    <security:http pattern="/config.json" security="none"/>
    <security:http pattern="/types.js" security="none"/>
    <security:http pattern="/pages/Common/**" security="none"/>
    <security:http pattern="/pages/Login/**" security="none"/>
    <security:http pattern="/themes/**" security="none"/>
    <security:http pattern="/resources/**" security="none"/>
    <security:http pattern="/**/wmapp/**" security="none"/>
    <security:http pattern="/**/wmmobile/**" security="none"/>
    <security:http pattern="/app/prefabs/**" security="none"/>
    <security:http auto-config="false" use-expressions="true" entry-point-ref="WMSecAuthEntryPoint" disable-url-rewriting="true" name="interceptUrlsBean" authentication-manager-ref="authenticationManager">
        <security:intercept-url pattern="/j_spring_security_logout" access="permitAll"/>
        <security:intercept-url pattern="/pages/Main/**" access="isAuthenticated()"/>
        <security:intercept-url pattern="/pages/footer/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/header/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/leftnav/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/rightnav/**" access="permitAll"/>
        <security:intercept-url pattern="/pages/topnav/**" access="permitAll"/>
        <security:intercept-url pattern="/services/prefabs/**/servicedefs" access="permitAll"/>
        <security:intercept-url pattern="/services/security/ssologin" access="isAuthenticated()"/>
        <security:intercept-url pattern="/services/security/**" access="permitAll"/>
        <security:intercept-url pattern="/services/servicedefs" access="permitAll"/>
        <security:intercept-url pattern="/**" access="isAuthenticated()"/>
        <security:intercept-url pattern="/" access="isAuthenticated()"/>
        <security:intercept-url pattern="/**" access="isAuthenticated()"/>
        <security:headers disabled="true"/>
        <security:request-cache ref="nullRequestCache"/>
        <security:custom-filter before="PRE_AUTH_FILTER" ref="wmTokenBasedPreAuthenticatedProcessingFilter"/>
        <security:custom-filter position="REMEMBER_ME_FILTER" ref="rememberMeAuthFilter"/>
        <security:csrf request-matcher-ref="csrfSecurityRequestMatcher" token-repository-ref="csrfTokenRepository"/>
        <security:custom-filter position="LOGOUT_FILTER" ref="logoutFilter"/>
        <security:session-management session-authentication-strategy-ref="compositeSessionAuthenticationStrategy"/>
        <security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
        <security:custom-filter after="REMEMBER_ME_FILTER" ref="samlFilter"/>
    </security:http>
    <bean class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy" id="compositeSessionAuthenticationStrategy">
        <constructor-arg>
            <list>
                <ref bean="sessionFixationProtectionStrategy"/>
                <ref bean="csrfAuthenticationStrategy"/>
            </list>
        </constructor-arg>
    </bean>
    <bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" id="sessionFixationProtectionStrategy"/>
    <bean class="org.springframework.security.web.csrf.CsrfAuthenticationStrategy" id="csrfAuthenticationStrategy">
        <constructor-arg ref="csrfTokenRepository"/>
    </bean>
    <security:authentication-manager id="authenticationManager">
        <security:authentication-provider ref="samlAuthenticationProvider"/>
        <security:authentication-provider ref="rememberMeAuthenticationProvider"/>
    </security:authentication-manager>
    <bean class="com.wavemaker.runtime.security.WMAppAccessDeniedHandler" id="wmAppAccessDeniedHandler"/>
    <bean class="com.wavemaker.runtime.security.csrf.WMHttpSessionCsrfTokenRepository" id="csrfTokenRepository">
        <constructor-arg>
            <bean class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository"/>
        </constructor-arg>
        <property name="csrfConfig" ref="csrfConfig"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.csrf.CsrfSecurityRequestMatcher" id="csrfSecurityRequestMatcher">
        <property name="csrfConfig" ref="csrfConfig"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.csrf.WMCsrfLogoutHandler" id="wmCsrfLogoutHandler">
        <constructor-arg>
            <bean class="org.springframework.security.web.csrf.CsrfLogoutHandler">
                <constructor-arg ref="csrfTokenRepository"/>
            </bean>
        </constructor-arg>
    </bean>
    <bean class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler" id="logoutSuccessHandler">
        <property name="defaultTargetUrl" value="/"/>
        <property name="redirectStrategy" ref="redirectStrategyBean"/>
    </bean>
    <bean class="org.springframework.security.web.DefaultRedirectStrategy" id="redirectStrategyBean"/>
    <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" id="securityContextLogoutHandler"/>
    <bean class="org.springframework.security.web.savedrequest.NullRequestCache" id="nullRequestCache"/>
    <bean class="com.wavemaker.runtime.security.filter.WMTokenBasedPreAuthenticatedProcessingFilter" id="wmTokenBasedPreAuthenticatedProcessingFilter">
        <constructor-arg ref="authenticationManager"/>
        <constructor-arg ref="wmTokenBasedAuthenticationService"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.token.WMTokenBasedAuthenticationService" id="wmTokenBasedAuthenticationService"/>
    <bean class="com.wavemaker.runtime.security.WMAuthenticationSuccessHandler" id="successHandler"/>
    <bean class="com.wavemaker.runtime.security.WMAuthenticationFailureHandler" id="failureHandler"/>
    <bean class="com.wavemaker.runtime.security.rememberme.WMAppRememberMeServices" id="rememberMeServices">
        <constructor-arg value="WM_APP_KEY"/>
    </bean>
    <bean class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter" id="rememberMeAuthFilter">
        <constructor-arg ref="authenticationManager"/>
        <constructor-arg ref="rememberMeServices"/>
    </bean>
    <bean class="org.springframework.security.authentication.RememberMeAuthenticationProvider" id="rememberMeAuthenticationProvider">
        <constructor-arg value="WM_APP_KEY"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.LoginConfig" id="loginConfig">
        <property name="pageName" value="Login"/>
        <property name="sessionTimeout">
            <bean class="com.wavemaker.commons.model.security.SessionTimeoutConfig">
                <property name="pageName" value=""/>
                <property name="timeoutValue" value="${general.session.timeout}"/>
                <property name="type">
                    <value type="com.wavemaker.commons.model.security.LoginType">SSO</value>
                </property>
            </bean>
        </property>
        <property name="type">
            <value type="com.wavemaker.commons.model.security.LoginType">SSO</value>
        </property>
    </bean>
    <bean class="com.wavemaker.commons.model.security.CSRFConfig" id="csrfConfig">
        <property name="enforceCsrfSecurity" value="${general.xsrf.enabled}"/>
        <property name="headerName" value="X-WM-XSRF-TOKEN"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.RememberMeConfig" id="rememberMeConfig">
        <property name="enabled" value="${general.rememberMe.enabled}"/>
        <property name="tokenValiditySeconds" value="${general.rememberMe.timeOut}"/>
    </bean>
    <bean class="com.wavemaker.commons.model.security.RolesConfig" id="rolesConfig">
        <property name="roleMap">
            <description>Roles based landing page definitions</description>
            <map key-type="java.lang.String" value-type="com.wavemaker.commons.model.security.RoleConfig">
                <entry key="admin">
                    <bean class="com.wavemaker.commons.model.security.RoleConfig">
                        <property name="landingPage" value="admin"/>
                    </bean>
                </entry>
                <entry key="user">
                    <bean class="com.wavemaker.commons.model.security.RoleConfig">
                        <property name="landingPage" value="Main"/>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>
    <bean class="com.wavemaker.commons.model.security.TokenAuthConfig" id="tokenAuthConfig">
        <property name="enabled" value="${general.tokenService.enabled}"/>
        <property name="parameter" value="${general.tokenService.parameter}"/>
        <property name="tokenValiditySeconds" value="${general.tokenService.tokenValiditySeconds}"/>
    </bean>
    <bean class="org.springframework.security.saml.SAMLAuthenticationProvider" id="samlAuthenticationProvider">
        <property name="userDetails" ref="wmSAMLDatabaseUserDetailsService"/>
    </bean>
    <bean class="org.springframework.security.web.FilterChainProxy" id="samlFilter">
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter"/>
            <security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
            <security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
        </security:filter-chain-map>
    </bean>
    <bean class="com.wavemaker.runtime.security.provider.saml.LoadKeyStoreInitializer" id="loadKeyStoreInitializer"/>
    <bean class="com.wavemaker.runtime.security.provider.saml.WMSAMLEntryPoint" id="WMSecAuthEntryPoint">
        <property name="defaultProfileOptions" ref="webSSOProfileOptions"/>
    </bean>
    <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions" id="webSSOProfileOptions">
        <property name="includeScoping" value="false"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.provider.saml.SAMLDelegatingLogoutFilter" id="logoutFilter">
        <constructor-arg index="0" ref="logoutSuccessHandler"/>
        <constructor-arg>
            <list>
                <ref bean="securityContextLogoutHandler"/>
                <ref bean="rememberMeServices"/>
                <ref bean="wmCsrfLogoutHandler"/>
            </list>
        </constructor-arg>
        <property name="filterProcessesUrl" value="/j_spring_security_logout"/>
    </bean>
    <bean class="org.springframework.security.saml.SAMLLogoutFilter" id="samlLogoutFilter">
        <constructor-arg index="0" ref="logoutSuccessHandler"/>
        <constructor-arg>
            <list>
                <ref bean="securityContextLogoutHandler"/>
                <ref bean="rememberMeServices"/>
                <ref bean="wmCsrfLogoutHandler"/>
            </list>
        </constructor-arg>
        <constructor-arg index="2" ref="securityContextLogoutHandler"/>
        <property name="filterProcessesUrl" value="/j_spring_security_logout"/>
    </bean>
    <bean class="org.springframework.security.saml.log.SAMLDefaultLogger" id="samlLogger">
        <property name="logMessages" value="true"/>
    </bean>
    <bean class="org.springframework.security.saml.metadata.MetadataGeneratorFilter" id="metadataGeneratorFilter">
        <constructor-arg ref="metadataGenerator"/>
        <property name="normalizeBaseUrl" value="true"/>
    </bean>
    <bean class="org.springframework.security.saml.metadata.MetadataGenerator" id="metadataGenerator">
        <property name="samlWebSSOFilter" ref="samlWebSSOProcessingFilter"/>
        <property name="entityBaseURL">
            <value>${providers.saml.entityBaseURL}</value>
        </property>
    </bean>
    <bean class="org.springframework.security.saml.metadata.MetadataDisplayFilter" id="metadataDisplayFilter"/>
    <bean class="com.wavemaker.runtime.security.provider.saml.filter.WMSAMLProcessingFilter" id="samlWebSSOProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationSuccessHandler" ref="successHandler"/>
        <property name="authenticationFailureHandler" ref="failureHandler"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.provider.saml.filter.WMSAMLLogoutProcessingFilter" id="samlLogoutProcessingFilter">
        <constructor-arg index="0" ref="logoutSuccessHandler"/>
        <constructor-arg index="1" ref="securityContextLogoutHandler"/>
    </bean>
    <bean class="org.springframework.security.saml.key.JKSKeyManager" depends-on="loadKeyStoreInitializer" id="keyManager">
        <constructor-arg value="classpath:saml/${providers.saml.keyStoreFile}"/>
        <constructor-arg type="java.lang.String" value="${providers.saml.keyStorePassword}"/>
        <constructor-arg>
            <map>
                <entry key="${providers.saml.keyAlias}" value="${providers.saml.keyStorePassword}"/>
            </map>
        </constructor-arg>
        <constructor-arg type="java.lang.String" value="${providers.saml.keyAlias}"/>
    </bean>
    <bean class="org.springframework.security.saml.context.SAMLContextProviderImpl" id="contextProvider">
        <property name="storageFactory">
            <bean class="org.springframework.security.saml.storage.EmptyStorageFactory"/>
        </property>
    </bean>
    <bean class="org.springframework.security.saml.metadata.CachingMetadataManager" id="metadata">
        <constructor-arg>
            <list>
                <bean class="com.wavemaker.runtime.security.provider.saml.metadata.WMMetadataProviderFactory"/>
            </list>
        </constructor-arg>
    </bean>
    <bean class="com.wavemaker.runtime.security.provider.saml.websso.WMWebSSOProfileConsumerImpl" id="webSSOprofileConsumer"/>
    <bean class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" id="hokWebSSOprofileConsumer"/>
    <bean class="org.springframework.security.saml.websso.WebSSOProfileImpl" id="webSSOprofile"/>
    <bean class="com.wavemaker.runtime.security.provider.saml.websso.WMSingleLogoutProfileImpl" id="logoutprofile"/>
    <bean class="org.springframework.security.saml.processor.SAMLProcessorImpl" id="processor">
        <constructor-arg>
            <list>
                <ref bean="redirectBinding"/>
                <ref bean="postBinding"/>
            </list>
        </constructor-arg>
    </bean>
    <bean class="org.springframework.security.saml.processor.HTTPPostBinding" id="postBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="wmHttpPostDecoder"/>
        <constructor-arg ref="httpPostEncoder"/>
    </bean>
    <bean class="com.wavemaker.runtime.security.provider.saml.SAMLConfig" id="samlConfig">
        <property name="validateType" value="${providers.saml.urlValidateType}"/>
        <property name="idpMetadataUrl" value="${providers.saml.idpMetadataUrl}"/>
        <property name="idpMetadataFileLocation" value="${providers.saml.idpMetadataFile}"/>
        <property name="metadataSource" value="${providers.saml.idpMetadataSource}"/>
    </bean>
    <bean class="org.opensaml.saml2.binding.decoding.HTTPPostDecoder" id="wmHttpPostDecoder"/>
    <bean class="org.opensaml.saml2.binding.encoding.HTTPPostEncoder" id="httpPostEncoder">
        <constructor-arg ref="velocityEngine"/>
        <constructor-arg value="/templates/saml2-post-binding.vm"/>
    </bean>
    <bean class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding" id="redirectBinding">
        <constructor-arg ref="parserPool"/>
    </bean>
    <bean class="org.springframework.security.saml.SAMLBootstrap" id="samlBootStrap"/>
    <bean class="org.springframework.security.saml.util.VelocityFactory" factory-method="getEngine" id="velocityEngine"/>
    <bean class="org.opensaml.xml.parse.StaticBasicParserPool" init-method="initialize" id="parserPool">
        <property name="builderFeatures">
            <map>
                <entry key="http://apache.org/xml/features/dom/defer-node-expansion" value="false"/>
            </map>
        </property>
    </bean>
    <bean class="com.wavemaker.runtime.security.provider.database.authorities.DefaultAuthoritiesProviderImpl" id="samlAuthoritiesProvider">
        <property name="hibernateTemplate">
            <ref bean="hrdbTemplate"/>
        </property>
        <property name="transactionManager">
            <ref bean="hrdbTransactionManager"/>
        </property>
        <property name="rolesByQuery" value="true"/>
        <property name="hql" value="false"/>
        <property name="authoritiesByUsernameQuery">
            <value>SELECT ROLE FROM USER WHERE USERNAME = :LOGGED_IN_USERNAME</value>
        </property>
    </bean>
    <bean class="com.wavemaker.runtime.security.provider.saml.WMSAMLDatabaseUserDetailsService" id="wmSAMLDatabaseUserDetailsService">
        <property name="authoritiesProvider" ref="samlAuthoritiesProvider"/>
    </bean>
</beans>
